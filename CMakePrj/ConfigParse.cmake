
macro(copy_dll str)

endmacro(copy_dll str)

macro(get_config str)
	set(parse_flag "off")
	set(parse_config "noconfig")
	set(first_config "noconfig")
	
	# get config type
	foreach(cfg ${${str}})
		#if(cfg MATCHES "\#")
		#	STRING( FIND ${cfg} "\#" pound_pos )
		#	#message(${pound_pos})
		#	STRING(SUBSTRING ${cfg} 0 ${pound_pos} cfg)
		#	#message(${cfg})
		#endif()
		#message(${cfg})
		if(cfg MATCHES "CONFIG_.*:")
			STRING(REGEX REPLACE "CONFIG_" "" temcfg ${cfg})
			STRING(REGEX REPLACE ":" "" temcfg ${temcfg})
			STRING(REGEX REPLACE "\ " "" temcfg ${temcfg})
			#message(${temcfg})
			if(${first_config} STREQUAL "noconfig")
				STRING(REGEX REPLACE ":" "" cfg ${cfg})
				set(first_config ${cfg})
			endif(${first_config} STREQUAL "noconfig")
			if(${temcfg} STREQUAL ${USR_CONFIG})
				STRING(REGEX REPLACE ":" "" cfg ${cfg})
				set(parse_config ${cfg})
			endif(${temcfg} STREQUAL ${USR_CONFIG})
		endif(cfg MATCHES "CONFIG_.*:")
	endforeach(cfg)

	if(${parse_config} STREQUAL "noconfig")
				set(parse_config ${first_config})
	endif(${parse_config} STREQUAL "noconfig")
	#message(${first_config})
	message("    **************** Use Config : " ${parse_config} " *****************    ")
	
	# start parse
	set(parse_default_config "start")
	foreach(cfg ${${str}})
		#if(cfg MATCHES "\#")
		#	STRING( FIND ${cfg} "\#" pound_pos )
		#	#message(${pound_pos})
		#	STRING(SUBSTRING ${cfg} 0 ${pound_pos} cfg)
		#	#message(${cfg})
		#endif()
		
		if(NOT cfg MATCHES "CONFIG_.*:" AND ${parse_default_config} STREQUAL "start")
  			#message("here set flag on")
  			#message(${cfg})
				set(parse_flag "on")	
		endif(NOT cfg MATCHES "CONFIG_.*:" AND ${parse_default_config} STREQUAL "start")
			
		if(cfg MATCHES "CONFIG_.*:")
			#message("i matches it")
			#message(${cfg})
			set(parse_default_config "end")
			set(parse_flag "on")	
		endif()
		
		if(${parse_flag} STREQUAL "on")
  		if(cfg MATCHES "windows_include_path.*")
  			STRING(REGEX REPLACE "windows_include_path" "" cfg ${cfg})
  			STRING(REGEX REPLACE "=" "" cfg ${cfg})
  			set(WINDOWS_INCLUDE_PATH ${WINDOWS_INCLUDE_PATH} ${cfg})
  		elseif(cfg MATCHES "linux_include_path.*")
  			STRING(REGEX REPLACE "linux_include_path" "" cfg ${cfg})
  			STRING(REGEX REPLACE "=" "" cfg ${cfg})
  			set(LINUX_INCLUDE_PATH ${LINUX_INCLUDE_PATH} ${cfg})
  		elseif(cfg MATCHES "apple_include_path.*")
  			STRING(REGEX REPLACE "apple_include_path" "" cfg ${cfg})
  			STRING(REGEX REPLACE "=" "" cfg ${cfg})
  			set(APPLE_INCLUDE_PATH ${APPLE_INCLUDE_PATH} ${cfg})
  			
  		elseif(cfg MATCHES "apple_link_path.*")
  			STRING(REGEX REPLACE "apple_link_path" "" cfg ${cfg})
  			STRING(REGEX REPLACE "=" "" cfg ${cfg})
  			set(APPLE_LINK_PATH ${APPLE_LINK_PATH} ${cfg})
  		elseif(cfg MATCHES "windows_link_path.*")
  			STRING(REGEX REPLACE "windows_link_path" "" cfg ${cfg})
  			STRING(REGEX REPLACE "=" "" cfg ${cfg})
  			set(WINDOWS_LINK_PATH ${WINDOWS_LINK_PATH} ${cfg})
  		elseif(cfg MATCHES "linux_link_path.*")
  			STRING(REGEX REPLACE "linux_link_path" "" cfg ${cfg})
  			STRING(REGEX REPLACE "=" "" cfg ${cfg})
  			set(LINUX_LINK_PATH ${LINUX_LINK_PATH} ${cfg})
  		
  		elseif(cfg MATCHES "link_path.*")
  			STRING(REGEX REPLACE "link_path" "" cfg ${cfg})
  			STRING(REGEX REPLACE "=" "" cfg ${cfg})
  			set(LINK_PATH ${LINK_PATH} ${cfg})
  		elseif(cfg MATCHES "include_path.*")
  			STRING(REGEX REPLACE "include_path" "" cfg ${cfg})
  			STRING(REGEX REPLACE "=" "" cfg ${cfg})
  			set(INCLUDE_PATH ${INCLUDE_PATH} ${cfg})
  			
  		elseif(cfg MATCHES "apple_link_library_32.*")
  			STRING(REGEX REPLACE "apple_link_library_32" "" cfg ${cfg})
  			STRING(REGEX REPLACE "=" "" cfg ${cfg})
  			set(APPLE_LINK_LIBRARY_32 ${APPLE_LINK_LIBRARY_32} ${cfg})
  		elseif(cfg MATCHES "apple_link_library_64.*")
  			STRING(REGEX REPLACE "apple_link_library_64" "" cfg ${cfg})
  			STRING(REGEX REPLACE "=" "" cfg ${cfg})
  			set(APPLE_LINK_LIBRARY_64 ${APPLE_LINK_LIBRARY_64} ${cfg})
  		elseif(cfg MATCHES "linux_link_library_32.*")
  			STRING(REGEX REPLACE "linux_link_library_32" "" cfg ${cfg})
  			STRING(REGEX REPLACE "=" "" cfg ${cfg})
  			set(LINUX_LINK_LIBRARY_32 ${LINUX_LINK_LIBRARY_32} ${cfg})
  		elseif(cfg MATCHES "linux_link_library_64.*")
  			STRING(REGEX REPLACE "linux_link_library_64" "" cfg ${cfg})
  			STRING(REGEX REPLACE "=" "" cfg ${cfg})
  			set(LINUX_LINK_LIBRARY_64 ${LINUX_LINK_LIBRARY_64} ${cfg})
  		elseif(cfg MATCHES "windows_link_library_32.*")
  			STRING(REGEX REPLACE "windows_link_library_32" "" cfg ${cfg})
  			STRING(REGEX REPLACE "=" "" cfg ${cfg})
  			set(WINDOWS_LINK_LIBRARY_32 ${WINDOWS_LINK_LIBRARY_32} ${cfg})
  		elseif(cfg MATCHES "windows_link_library_64.*")
  			STRING(REGEX REPLACE "windows_link_library_64" "" cfg ${cfg})
  			STRING(REGEX REPLACE "=" "" cfg ${cfg})
  			set(WINDOWS_LINK_LIBRARY_64 ${WINDOWS_LINK_LIBRARY_64} ${cfg})
  			
  		elseif(cfg MATCHES "link_library_32.*")
  			STRING(REGEX REPLACE "link_library_32" "" cfg ${cfg})
  			STRING(REGEX REPLACE "=" "" cfg ${cfg})
  			set(LINK_LIBRARY_32 ${LINK_LIBRARY_32} ${cfg})
  		elseif(cfg MATCHES "link_library_64.*")
  			STRING(REGEX REPLACE "link_library_64" "" cfg ${cfg})
  			STRING(REGEX REPLACE "=" "" cfg ${cfg})
  			set(LINK_LIBRARY_64 ${LINK_LIBRARY_64} ${cfg})
  			
  		elseif(cfg MATCHES "windows_link_library.*")
  			STRING(REGEX REPLACE "windows_link_library" "" cfg ${cfg})
  			STRING(REGEX REPLACE "=" "" cfg ${cfg})
  			set(WINDOWS_LINK_LIBRARY ${WINDOWS_LINK_LIBRARY} ${cfg})
  		elseif(cfg MATCHES "linux_link_library.*")
  			STRING(REGEX REPLACE "linux_link_library" "" cfg ${cfg})
  			STRING(REGEX REPLACE "=" "" cfg ${cfg})
  			set(LINUX_LINK_LIBRARY ${LINUX_LINK_LIBRARY} ${cfg})
  		elseif(cfg MATCHES "apple_link_library.*")
  			STRING(REGEX REPLACE "apple_link_library" "" cfg ${cfg})
  			STRING(REGEX REPLACE "=" "" cfg ${cfg})
  			set(APPLE_LINK_LIBRARY ${APPLE_LINK_LIBRARY} ${cfg})
  			
  		elseif(cfg MATCHES "link_library.*")
  			STRING(REGEX REPLACE "link_library" "" cfg ${cfg})
  			STRING(REGEX REPLACE "=" "" cfg ${cfg})
  			set(LINK_LIBRARY ${LINK_LIBRARY} ${cfg})
  			
  		elseif(cfg MATCHES "windows_cxxflag.*")
  			STRING(REGEX REPLACE "windows_cxxflag" "" cfg ${cfg})
  			STRING(REGEX REPLACE "=" "" cfg ${cfg})
  			#set(cfg /D${cfg}\ )
  			set(WINDOWS_CXXFLAG ${WINDOWS_CXXFLAG} ${cfg})
  		elseif(cfg MATCHES "linux_cxxflag.*")
  			STRING(REGEX REPLACE "linux_cxxflag" "" cfg ${cfg})
  			STRING(REGEX REPLACE "=" "" cfg ${cfg})
  			#set(cfg -D${cfg}\ )
  			set(LINUX_CXXFLAG ${LINUX_CXXFLAG} ${cfg})
  		elseif(cfg MATCHES "apple_cxxflag.*")
  			STRING(REGEX REPLACE "apple_cxxflag" "" cfg ${cfg})
  			STRING(REGEX REPLACE "=" "" cfg ${cfg})
  			#set(cfg -D${cfg}\ )
  			set(APPLE_CXXFLAG ${APPLE_CXXFLAG} ${cfg})
  		elseif(cfg MATCHES "cxxflag.*")
  			STRING(REGEX REPLACE "cxxflag" "" cfg ${cfg})
  			STRING(REGEX REPLACE "=" "" cfg ${cfg})
  			#if(WIN32)
  			#	set(cfg \ /D\ ${cfg})
  			#else()
  			#	set(cfg \ -D\ ${cfg})
  			#endif(WIN32)
  			
  			set(CXX_FLAGS ${CXX_FLAGS} ${cfg})
  			#message(${CXX_FLAGS})
  		endif()
  		
  		if(cfg MATCHES "CONFIG_.*:")
  			STRING(REGEX REPLACE ":" "" temcfg ${cfg})
  			if(NOT ${temcfg} STREQUAL ${parse_config})	
  				#message("i set flag off")
  				#message(${cfg})
  				#message(${parse_config})
					set(parse_flag "off")	
				endif(NOT ${temcfg} STREQUAL ${parse_config})
			endif(cfg MATCHES "CONFIG_.*:")
		
		endif(${parse_flag} STREQUAL "on")	
	endforeach(cfg)
	
endmacro(get_config)

# Start
set(USR_CONFIG ${CONFIG})
if ("${USR_CONFIG}" STREQUAL "")
	set(USR_CONFIG "noconfig")
endif("${USR_CONFIG}" STREQUAL "")
file(STRINGS CMakePrj/prjconfig.txt config_str)
get_config (config_str)

if(APPLE)
	set(INCLUDE_PATH ${INCLUDE_PATH} ${APPLE_INCLUDE_PATH})
	set(LINK_PATH ${LINK_PATH} ${APPLE_LINK_PATH})
	
	if ("${CMAKE_SIZEOF_VOID_P}" EQUAL "8") 
		set(LINK_LIBRARY ${LINK_LIBRARY} ${APPLE_LINK_LIBRARY_64})
	elseif ("${CMAKE_SIZEOF_VOID_P}" EQUAL "4")
		set(LINK_LIBRARY ${LINK_LIBRARY} ${APPLE_LINK_LIBRARY_32})
	else()
		set(LINK_LIBRARY ${LINK_LIBRARY} ${APPLE_LINK_LIBRARY_32} ${APPLE_LINK_LIBRARY_64})
	endif ()
	set(LINK_LIBRARY ${LINK_LIBRARY} ${APPLE_LINK_LIBRARY})
	
	set(CXX_FLAGS ${CXX_FLAGS} ${APPLE_CXXFLAG})
elseif(WIN32)
	set(INCLUDE_PATH ${INCLUDE_PATH} ${WINDOWS_INCLUDE_PATH})
	set(LINK_PATH ${LINK_PATH} ${WINDOWS_LINK_PATH})
	if ("${CMAKE_SIZEOF_VOID_P}" EQUAL "8") 
		set(LINK_LIBRARY ${LINK_LIBRARY} ${WINDOWS_LINK_LIBRARY_64})
	elseif ("${CMAKE_SIZEOF_VOID_P}" EQUAL "4")
		set(LINK_LIBRARY ${LINK_LIBRARY} ${WINDOWS_LINK_LIBRARY_32})
	endif ()
	set(LINK_LIBRARY ${LINK_LIBRARY} ${WINDOWS_LINK_LIBRARY})
	set(CXX_FLAGS ${CXX_FLAGS} ${WINDOWS_CXXFLAG})
else()
	set(INCLUDE_PATH ${INCLUDE_PATH} ${LINUX_INCLUDE_PATH})
	set(LINK_PATH ${LINK_PATH} ${LINUX_LINK_PATH})
	
	if ("${CMAKE_SIZEOF_VOID_P}" EQUAL "8") 
		set(LINK_LIBRARY ${LINK_LIBRARY} ${LINUX_LINK_LIBRARY_64})
	elseif ("${CMAKE_SIZEOF_VOID_P}" EQUAL "4")
		set(LINK_LIBRARY ${LINK_LIBRARY} ${LINUX_LINK_LIBRARY_32})
	endif ()
	set(LINK_LIBRARY ${LINK_LIBRARY} ${WINDOWS_LINK_LIBRARY})
	
	set(LINK_LIBRARY ${LINK_LIBRARY} ${LINUX_LINK_LIBRARY})
	set(CXX_FLAGS ${CXX_FLAGS} ${LINUX_CXXFLAG})
endif()

STRING(REGEX REPLACE ";" " " CXX_FLAGS "${CXX_FLAGS}")

# build type, debug or release
set(USR_BUILD_TYPE ${TYPE})
if ("${TYPE}" STREQUAL "")
	set(USR_BUILD_TYPE "Debug")
endif()
if (${USR_BUILD_TYPE} STREQUAL "release") 
	set(CMAKE_BUILD_TYPE "Release")
else()
	set(CMAKE_BUILD_TYPE "Debug")
endif (${USR_BUILD_TYPE} STREQUAL "release")

set(CONFIG_CXX_FLAGS ${CXX_FLAGS})
set(CONFIG_LINK_LIBRARY ${LINK_LIBRARY})
set(CONFIG_LINK_PATH ${LINK_PATH})
set(CONFIG_INCLUDE_PATH ${INCLUDE_PATH})
set(CONFIG_NAME ${USR_CONFIG})
